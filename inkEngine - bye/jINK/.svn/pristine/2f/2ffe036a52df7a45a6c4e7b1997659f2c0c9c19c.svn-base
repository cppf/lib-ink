/****************************************************************************
 *                                                                          *
 * File    : input.cpp                                                      *
 *                                                                          *
 * Purpose : Handling of all input for C++                                  *
 *                                                                          *
 * History : Date      		Part of INK Game Engine                         *
 *           14/07/2011		Subhajit Sahu                                   *
 *                                                                          *
 ****************************************************************************/

#ifndef		_input_cpp_

#define		_input_cpp_		1



// ----Includes------------------------------------------------------
#include "win32.h"
#include "macro.h"



// ----Global Prototypes---------------------------------------------
PROC	Msg_WM_CHAR(_MSG_PARAMS);
PROC	Msg_WM_SYSCHAR(_MSG_PARAMS);
PROC	Msg_WM_KEYDOWN(_MSG_PARAMS);
PROC	Msg_WM_SYSKEYDOWN(_MSG_PARAMS);
PROC	Msg_WM_KEYUP(_MSG_PARAMS);
PROC	Msg_WM_SYSKEYUP(_MSG_PARAMS);
PROC	Msg_WM_LBUTTONDOWN_Text(_MSG_PARAMS);
PROC	Msg_WM_RBUTTONDOWN_Text(_MSG_PARAMS);
PROC	Msg_WM_MBUTTONDOWN_Text(_MSG_PARAMS);
PROC	Msg_WM_LBUTTONUP_Text(_MSG_PARAMS);
PROC	Msg_WM_RBUTTONUP_Text(_MSG_PARAMS);
PROC	Msg_WM_MBUTTONUP_Text(_MSG_PARAMS);
PROC	Msg_WM_LBUTTONDBLCLK_Text(_MSG_PARAMS);
PROC	Msg_WM_RBUTTONDBLCLK_Text(_MSG_PARAMS);
PROC	Msg_WM_MBUTTONDBLCLK_Text(_MSG_PARAMS);
PROC	Msg_WM_MOUSEWHEEL_Text(_MSG_PARAMS);
PROC	Msg_WM_MOUSEMOVE_Text(_MSG_PARAMS);
PROC	Msg_WM_LBUTTONDOWN_Gaming(_MSG_PARAMS);
PROC	Msg_WM_RBUTTONDOWN_Gaming(_MSG_PARAMS);
PROC	Msg_WM_MBUTTONDOWN_Gaming(_MSG_PARAMS);
PROC	Msg_WM_LBUTTONUP_Gaming(_MSG_PARAMS);
PROC	Msg_WM_RBUTTONUP_Gaming(_MSG_PARAMS);
PROC	Msg_WM_MBUTTONUP_Gaming(_MSG_PARAMS);
PROC	Msg_WM_LBUTTONDBLCLK_Gaming(_MSG_PARAMS);
PROC	Msg_WM_RBUTTONDBLCLK_Gaming(_MSG_PARAMS);
PROC	Msg_WM_MBUTTONDBLCLK_Gaming(_MSG_PARAMS);
PROC	Msg_WM_MOUSEWHEEL_Gaming(_MSG_PARAMS);
PROC	Msg_WM_MOUSEMOVE_Gaming(_MSG_PARAMS);





// ----Externals-----------------------------------------------------
extern BOOL 	inkWindow::StopServiceRequest;
extern BOOL 	inkWindow::StopServiceReady;
extern HANDLE	inkWindow::Thread;




// ----Constants-----------------------------------------------------
#define			_ink_MODE_Text				1
#define			_ink_MODE_Game				2
#define			_inkMouseHoldPositionX		320
#define			_inkMouseHoldPositionY		240
#define			_In_ControlSizeB			256
#define			_In_TextSize				63
#define			_In_TextSizeB				256
#define			_In_GameSize				63
#define			_In_GameSizeB				256
#define			_In_GameStatusSizeB			32
#define			_In_MouseSize				63
#define			_In_MouseSizeB				256
#define			_In_Key_MouseLeft			0xFF
#define			_In_Key_MouseRight			0xFE
#define			_In_Key_MouseMiddle			0xFD
#define			_In_Key_MouseLeftDblClk		0xFC
#define			_In_Key_MouseRightDblClk	0xFB
#define			_In_Key_MouseMiddleDblClk	0xFA
#define			_In_Key_MouseWheelPlus		0xF9
#define			_In_Key_MouseWheelMinus		0xF8
#define			_In_Key_MouseXmove			0xF7
#define			_In_Key_MouseYmove			0xF6




// ----Macros--------------------------------------------------------


// Insert data to a queue whose size must be a power of 2 ( max = size-1 )
// The macro may or may not be able to insert data to the queue
#define		inkInsertQueue(queue, num, rear, max, data)	\
if(num <= max)\
{\
	queue[rear] = data;\
	rear = (rear+1) & max;\
	num++;\
}


// Delete data from a queue whose size must be a power of 2 ( max = size-1 )
// The macro may or may not be able to delete data from queue
// data may contain garbage value if queue is empty and data is not initialized
#define		inkDeleteQueue(queue, num, front, max, data)	\
if(num)\
{\
data = queue[front];\
front = (front+1) & max;\
num--;\
}\



// ----Structures----------------------------------------------------

typedef struct _MOUSE_SETTINGS
{
	DWORD		ThresholdX;
	DWORD		ThresholdY;
	DWORD		Acceleration;
}MOUSE_SETTINGS;

typedef struct _UINT2
{
	UINT	low;
	UINT	high;
}UINT2;






// ----Code----------------------------------------------------------


/*
Class:	inkInput

First of all inkInput::StartService() must be called before any other
function is used.
At the end of the game, inkInput::StopService() must be called before exit.
*/
class inkInput
{
	// Global/Static Data
	private:
	static UINT				KeyMode;
	static void*			BaseMem;
	static UBYTE*			Control;
	static UBYTE*			TextBuffer;
	static UINT				TextItems;
	static UINT				TextFront;
	static UINT				TextRear;
	static UINT*			GameBuffer;
	static UINT				GameItems;
	static UINT				GameFront;
	static UINT				GameRear;
	static UINT*			GameStatus;
	static UINT2*			MouseBuffer;
	static UINT				MouseItems;
	static UINT				MouseFront;
	static UINT				MouseRear;
	static MOUSE_SETTINGS	MouseSettings;


	// Input Handling Functions Declarations
	public:
	int		StartService(char mode, void* control);
	int		StopService(void);
	int		GetKey(void);
	UINT2	GetMouse(void);
	void	Flush(void);
	int		IsKeyPressed(int key);
	void	SetKeyControl(int key, int control);
	int		GetKeyControl(int key);
	void	LoadKeyControls(void* ctrl);
	void	SaveKeyControls(void* ctrl);
	int		GetPressedKeys(void);
	int		GetKeyboardDelay(void);
	void	SetKeyboardDelay(UINT x);
	int		GetKeyboardSpeed(void);
	void	SetKeyboardSpeed(UINT x);
	void	GetMouseInformation(_LPUINT x);
	void	SetMouseInformation(_LPUINT x);
};
UINT			inkInput::KeyMode;
void*			inkInput::BaseMem;
UBYTE*			inkInput::Control;
UBYTE*			inkInput::TextBuffer;
UINT			inkInput::TextItems;
UINT			inkInput::TextFront;
UINT			inkInput::TextRear;
UINT*			inkInput::GameBuffer;
UINT			inkInput::GameItems;
UINT			inkInput::GameFront;
UINT			inkInput::GameRear;
UINT*			inkInput::GameStatus;
UINT2*			inkInput::MouseBuffer;
UINT			inkInput::MouseItems;
UINT			inkInput::MouseFront;
UINT			inkInput::MouseRear;
HANDLE			inkInput::MsgThread;
BOOL			inkInput::MainBusy;
BOOL			inkInput::MsgBusy;


// Start the Input Service with Text Mode(1) or Gaming Mode(2)
BOOL	inkInput::StartService(char mode, void* control)
{
	SuspendThread(inkWindow::Thread);
	if(KeyMode)inkStopInputService();	// Already Started ?

	// Text Mode
	if(mode == 1)
	{
		BaseMem = (void*)GlobalAlloc(GMEM_FIXED|GMEM_ZEROINIT, _In_TextSizeB + _In_MouseSizeB);
		TextBuffer = (UBYTE*)BaseMem;
		In_MouseBuffer = (UINT2*)((char*)In_TextBuffer + _In_TextSizeB);
		Flush();
		KeyMode = 1;
		
		// Set WM_Handler
		WM_Handler[WM_CHAR] = Msg_WM_CHAR;
		WM_Handler[WM_SYSCHAR] = Msg_WM_SYSCHAR;
		WM_Handler[WM_KEYDOWN] = NULL;
		WM_Handler[WM_SYSKEYDOWN] = NULL;
		WM_Handler[WM_KEYUP] = NULL;
		WM_Handler[WM_SYSKEYUP] = NULL;
		WM_Handler[WM_LBUTTONDOWN] = Msg_WM_LBUTTONDOWN_Text;
		WM_Handler[WM_RBUTTONDOWN] = Msg_WM_RBUTTONDOWN_Text;
		WM_Handler[WM_MBUTTONDOWN] = Msg_WM_MBUTTONDOWN_Text;
		WM_Handler[WM_LBUTTONUP] = Msg_WM_LBUTTONUP_Text;
		WM_Handler[WM_RBUTTONUP] = Msg_WM_RBUTTONUP_Text;
		WM_Handler[WM_MBUTTONUP] = Msg_WM_MBUTTONUP_Text;
		WM_Handler[WM_LBUTTONDBLCLK] = Msg_WM_LBUTTONDBLCLK_Text;
		WM_Handler[WM_RBUTTONDBLCLK] = Msg_WM_RBUTTONDBLCLK_Text;
		WM_Handler[WM_MBUTTONDBLCLK] = Msg_WM_MBUTTONDBLCLK_Text;
		WM_Handler[WM_MOUSEWHEEL] = Msg_WM_MOUSEWHEEL_Text;
		WM_Handler[WM_MOUSEMOVE] = Msg_WM_MOUSEMOVE_Text;
		ResumeThread(inkWindow::Thread);
		return(TRUE);
	}
	// Gaming Mode
	else if(mode == 2)
	{
		BaseMem = (void*)GlobalAlloc(GMEM_FIXED|GMEM_ZEROINIT, _In_ControlSizeB + _In_GameStatusSizeB + _In_GameSizeB);
		Control = (UBYTE*)BaseMem;
		GameStatus = (UINT*)((char*)Control + _In_ControlSizeB);
		GameBuffer = (UINT*)((char*)GameStatus + _In_GameStatusSizeB);
		LoadKeyControls(control);
		Flush();
		KeyMode = 2;
		
		// Set WM_Handler
		WM_Handler[WM_CHAR] = NULL;
		WM_Handler[WM_SYSCHAR] = NULL;
		WM_Handler[WM_KEYDOWN] = Msg_WM_KEYDOWN;
		WM_Handler[WM_SYSKEYDOWN] = Msg_WM_SYSKEYDOWN;
		WM_Handler[WM_KEYUP] = Msg_WM_KEYUP;
		WM_Handler[WM_SYSKEYUP] = Msg_WM_SYSKEYUP;
		WM_Handler[WM_LBUTTONDOWN] = Msg_WM_LBUTTONDOWN_Gaming;
		WM_Handler[WM_RBUTTONDOWN] = Msg_WM_RBUTTONDOWN_Gaming;
		WM_Handler[WM_MBUTTONDOWN] = Msg_WM_MBUTTONDOWN_Gaming;
		WM_Handler[WM_LBUTTONUP] = Msg_WM_LBUTTONUP_Gaming;
		WM_Handler[WM_RBUTTONUP] = Msg_WM_RBUTTONUP_Gaming;
		WM_Handler[WM_MBUTTONUP] = Msg_WM_MBUTTONUP_Gaming;
		WM_Handler[WM_LBUTTONDBLCLK] = Msg_WM_LBUTTONDBLCLK_Gaming;
		WM_Handler[WM_RBUTTONDBLCLK] = Msg_WM_RBUTTONDBLCLK_Gaming;
		WM_Handler[WM_MBUTTONDBLCLK] = Msg_WM_MBUTTONDBLCLK_Gaming;
		WM_Handler[WM_MOUSEWHEEL] = Msg_WM_MOUSEWHEEL_Gaming;
		WM_Handler[WM_MOUSEMOVE] = Msg_WM_MOUSEMOVE_Gaming;
		ResumeThread(inkWindow::Thread);
		return(TRUE);
	}
	ResumeThread(inkWindow::Thread);
	return(FALSE);
}



void	inkInput::StopService(void)
{
	if(!KeyMode)return;
	inkWindow::StopServiceRequest = TRUE;		// Request Window Service Thread to allow to stop a service safely
	while(inkWindow::StopServiceReady);			// Wait till Windows Service is ready
	SuspendThread(inkWindow::Thread);			// Suspend Windows Service
	KeyMode = 0;
	WM_Handler[WM_CHAR] = NULL;
	WM_Handler[WM_SYSCHAR] = NULL;
	WM_Handler[WM_KEYDOWN] = NULL;
	WM_Handler[WM_SYSKEYDOWN] = NULL;
	WM_Handler[WM_KEYUP] = NULL;
	WM_Handler[WM_SYSKEYUP] = NULL;
	WM_Handler[WM_LBUTTONDOWN] = NULL;
	WM_Handler[WM_RBUTTONDOWN] = NULL;
	WM_Handler[WM_MBUTTONDOWN] = NULL;
	WM_Handler[WM_LBUTTONUP] = NULL;
	WM_Handler[WM_RBUTTONUP] = NULL;
	WM_Handler[WM_MBUTTONUP] = NULL;
	WM_Handler[WM_LBUTTONDBLCLK] = NULL;
	WM_Handler[WM_RBUTTONDBLCLK] = NULL;
	WM_Handler[WM_MBUTTONDBLCLK] = NULL;
	WM_Handler[WM_MOUSEWHEEL] = NULL;
	WM_Handler[WM_MOUSEMOVE] = NULL;
	GlobalFree(BaseMem);
	inkWindow::StopServiceRequest = FALSE;
	inkWindow::StopServiceReady = FALSE;
	ResumeThread(inkWindow::Thread);
}


UINT	inkInput::GetKey(void)
{
	UINT	k = -1;
	if(KeyMode == 2)
	{
		inkDeleteQueue(GameBuffer, GameItems, GameFront, GameMax, k)
		return(Control[k]);
	}
	inkDeleteQueue(TextBuffer, TextItems, TextFront, TextMax, k)
	return(k);
}


UINT	inkInput::GetCodedKey(void)
{
	UINT	k = -1;
	if(KeyMode == 2)
	{
		inkDeleteQueue(GameBuffer, GameItems, GameFront, GameMax, k)
		return(k);
	}
	inkDeleteQueue(TextBuffer, TextItems, TextFront, TextMax, k)
	return(k);
}


UINT	inkInput::GetKeyFromCode(UINT k)
{
	return(Control[k]);
}


UINT2	inkInput::GetMouse(void)
{
	UINT2 k;
	k.low = -1;
	k.high = -1;
	if(KeyMode == 1)
		inkDeleteQueue(MouseBuffer, MouseItems, MouseFront, MouseMax, k)
	return(k);
}



// Empties all the input buffers
void	inkInput::Flush(void)
{
	BOOL	StopIt;
	if(!(inkWindow::StopServiceReady))
	{
		StopIt = TRUE;
		inkWindow::StopServiceRequest = TRUE;
		while(inkWindow::StopServiceReady);
		SuspendThread(inkWindow::Thread);
	}
	TextItems = 0;
	TextFront = 0;
	TextRear = 0;
	GameItems = 0;
	GameFront = 0;
	GameRear = 0;
	MouseItems = 0;
	MouseFront = 0;
	MouseRear = 0;
	if(StopIt)
	{
		inkWindow::StopServiceRequest = FALSE;
		inkWindow::StopServiceReady = FALSE;
		ResumeThread(inkWindow::Thread);
	}
}




BOOL	inkInput::IsKeyPressed(int key)
{
	if(KeyMode == 2)
		return((GameStatus[k >> 5] & (1<<(k & 31))) > 0);
	return(FALSE);
}




void	inkInput::SetCodedKeyControl(int key, int control)
{
	if(KeyMode == 2)
		Control[key & 0xFF] = (UCHAR)(control & 0xFF);
}


int		inkInput::GetCodedKeyControl(int key)
{
	if(KeyMode == 2)
		return(Control[key & 0xFF]);
	return(-1);
}



// Load custom controls or the default one (NULL)
void	inkInput::LoadControls(void* ctrl)
{
	int i;
	
	if(KeyMode == 2)
	{
		// Load default controls ?
		if(ctrl == NULL)
		{
			for(i=0; i<_In_ControlSizeB; i++)
				Control[i] = i;
			return;
		}
		else
		{
			CopyMemory(Control, ctrl, _In_ControlSizeB);
		}
	}
}



// Save the current controls to a memory location
void	inkInput::SaveControls(void* ctrl)
{
	if(KeyMode == 2)
	{
		CopyMemory(ctrl, Control, _In_ControlSizeB);
	}
}




int		inkInput::GetPressedKeys(void)
{
	UINT* status;
	int i, j, c;

	if(KeyMode == 2)
	{
		c = 0;
		status = GameStatus;
		for(i=0; i<_In_GameStatusSizeB; i+=4)
			{
		if(status[i] == 0)continue;
			j = 0;
			c = 1;
			while(status[i] != 0)
			{
				if(status[i] & 1){ inkInsertQueue_Game(Control[(i<<5)|j]|0x400); }
				status[i] = status[i] >> 1;
				j++;
			}
		}
	}
	return(-1);
}



// Get the number of butons on the mouse (0 = no mouse)
// Get the keyboard initial delay time
int		inkInput::GetKeyboardDelay(void)
{
	UINT x;
	LPUINT y;
	y = &x;
	SystemParametersInfo(SPI_GETKEYBOARDDELAY, 0, y, 0);
	return(x);
}



// Set the keyboard initial delay time
void	inkInput::SetKeyboardDelay(UINT x)
{
	SystemParametersInfo(SPI_SETKEYBOARDDELAY, x, NULL, 0);
}



// Get the keyboard speed / repeat rate
int		inkInput::GetKeyboardSpeed(void)
{
	UINT x;
	LPUINT y;
	y = &x;
	SystemParametersInfo(SPI_GETKEYBOARDSPEED, 0, y, 0);
	return(x);
}



// Set the keyboard speed / repeat rate
void	inkInput::SetKeyboardSpeed(UINT x)
{
	SystemParametersInfo(SPI_SETKEYBOARDSPEED, x, NULL, 0);
}



// Get mouse x and y threshold values and mouse speed in 3 integer array
void	inkInput::GetMouseInformation(_LPUINT x)
{
	SystemParametersInfo(SPI_GETMOUSE, 0, x, 0);
}



// Set mouse x and y threshold values and mouse speed in 3 integer array
void	inkInput::SetMouseInformation(DWORD threshold_x, DWORD threshold_y, DWORD acceleration)
{
	SystemParametersInfo(SPI_SETMOUSE, 0, x, 0);
}



// WM_CHAR Message Handler (Text)
PROC	Msg_WM_CHAR(_MSG_PARAMS)
{
	inkInsertQueue(TextBuffer, TextItems, TextRear, TextMax, wParam)
	return(0);
}



// WM_SYSCHAR Message Handler (Text)
PROC	Msg_WM_SYSCHAR(_MSG_PARAMS)
{
	inkInsertQueue(TextBuffer, TextItems, TextRear, TextMax, wParam|0x80)
	return(0);
}



// WM_KEYDOWN Message Handler (Gaming)
PROC	Msg_WM_KEYDOWN(_MSG_PARAMS)
{
	UINT k, l;
	l = Control[wParam];
	k = (lParam & 0xE0000000) | (((lParam & 0x0000FFFF) << 8) | wParam);
	inkInsertQueue(GameBuffer, GameItems, GameRear, GameMax, k)
	GameStatus[l >> 5] |= (1 << (l & 31));
	return(0);
}



// WM_SYSKEYDOWN Message Handler (Gaming)
PROC	Msg_WM_SYSKEYDOWN(_MSG_PARAMS)
{
	UINT k, l;
	l = Control[wParam];
	k = (lParam & 0xE0000000) | ((((lParam & 0x0000FFFF) << 8) | wParam) | 0x10000000);
	inkInsertQueue(GameBuffer, GameItems, GameRear, GameMax, k)
	GameStatus[wParam >> 5] |= (1 << (wParam & 31));
	return(0);
}



// WM_KEYUP Message Handler (Gaming)
PROC	Msg_WM_KEYUP(_MSG_PARAMS)
{
	UINT k, l;
	l = Control[wParam];
	k = (lParam & 0xE0000000) | (((lParam & 0x0000FFFF) << 8) | wParam);
	inkInsertQueue(GameBuffer, GameItems, GameRear, GameMax, k)
	GameStatus[l >> 5] &= ~(1 << (l & 31));
	return(0);
}



// WM_SYSKEYUP Message Handler (Gaming)
PROC	Msg_WM_SYSKEYUP(_MSG_PARAMS)
{
	UINT k, l;
	l = Control[wParam];
	k = (lParam & 0xE0000000) | ((((lParam & 0x0000FFFF) << 8) | wParam) | 0x10000000);
	inkInsertQueue(GameBuffer, GameItems, GameRear, GameMax, k)
	GameStatus[l >> 5] &= ~(1 << (l & 31));
	return(0);
	}



// WM_LBUTTONDOWN Message Handler (Text)
PROC	Msg_WM_LBUTTONDOWN_Text(_MSG_PARAMS)
{
	UINT2	k;
	k.low = wParam;
	k.high = lParam;
	inkInsertQueue(MouseBuffer, MouseItems, MouseRear, MouseMax, k)
	return(0);
}



// WM_LBUTTONDOWN Message Handler (Gaming)
PROC	Msg_WM_LBUTTONDOWN_Gaming(_MSG_PARAMS)
{
	UINT k, l;
	l = Control[_In_Key_MouseLeft];
	k = (0x40000000 & (((GameStatus[l >> 5] & (1<<(l & 31))) == 0) - 1)) | _In_Key_MouseLeft;
	inkInsertQueue(GameBuffer, GameItems, GameRear, GameMax, k)
	GameStatus[l >> 5] |= (1 << (l & 31));
	return(0);
}



// WM_RBUTTONDOWN Message Handler (Text)
PROC	Msg_WM_RBUTTONDOWN_Text(_MSG_PARAMS)
{
	UINT2	k;
	k.low = wParam;
	k.high = lParam;
	inkInsertQueue(MouseBuffer, MouseItems, MouseRear, MouseMax, k)
	return(0);
}



// WM_RBUTTONDOWN Message Handler (Gaming)
PROC	Msg_WM_RBUTTONDOWN_Gaming(_MSG_PARAMS)
{
	UINT k, l;
	l = Control[_In_Key_MouseRight];
	k = (0x40000000 & (((GameStatus[l >> 5] & (1<<(l & 31))) == 0) - 1)) | _In_Key_MouseRight;
	inkInsertQueue(GameBuffer, GameItems, GameRear, GameMax, k)
	GameStatus[l >> 5] |= (1 << (l & 31));
	return(0);
}



// WM_MBUTTONDOWN Message Handler (Text)
PROC	Msg_WM_MBUTTONDOWN_Text(_MSG_PARAMS)
{
	UINT2	k;
	k.low = wParam;
	k.high = lParam;
	inkInsertQueue(MouseBuffer, MouseItems, MouseRear, MouseMax, k)
	return(0);
}



// WM_MBUTTONDOWN Message Handler (Gaming)
PROC	Msg_WM_MBUTTONDOWN_Gaming(_MSG_PARAMS)
{
	UINT k, l;
	l = Control[_In_Key_MouseMiddle];
	k = (0x40000000 & (((GameStatus[l >> 5] & (1<<(l & 31))) == 0) - 1)) | _In_Key_MouseMiddle;
	inkInsertQueue(GameBuffer, GameItems, GameRear, GameMax, k)
	GameStatus[l >> 5] |= (1 << (l & 31));
	return(0);
}



// WM_LBUTTONUP Message Handler (Text)
PROC	Msg_WM_LBUTTONUP_Text(_MSG_PARAMS)
{
	UINT2	k;
	k.low = wParam;
	k.high = lParam;
	inkInsertQueue(MouseBuffer, MouseItems, MouseRear, MouseMax, k)
	return(0);
}



// WM_LBUTTONUP Message Handler (Gaming)
PROC	Msg_WM_LBUTTONUP_Gaming(_MSG_PARAMS)
{
	UINT k, l;
	l = Control[_In_Key_MouseLeft];
	k = 0xC0000000 | _In_Key_MouseLeft;
	inkInsertQueue(GameBuffer, GameItems, GameRear, GameMax, k)
	GameStatus[l >> 5] &= ~(1 << (l & 31));
	return(0);
}



// WM_RBUTTONUP Message Handler (Text)
PROC	Msg_WM_RBUTTONUP_Text(_MSG_PARAMS)
{
	UINT2	k;
	k.low = wParam;
	k.high = lParam;
	inkInsertQueue(MouseBuffer, MouseItems, MouseRear, MouseMax, k)
	return(0);
}



// WM_RBUTTONUP Message Handler (Gaming)
PROC	Msg_WM_RBUTTONUP_Gaming(_MSG_PARAMS)
{
	UINT k, l;
	l = Control[_In_Key_MouseRight];
	k = 0xC0000000 | _In_Key_MouseRight;
	inkInsertQueue(GameBuffer, GameItems, GameRear, GameMax, k)
	GameStatus[l >> 5] &= ~(1 << (l & 31));
	return(0);
}



// WM_MBUTTONUP Message Handler (Text)
PROC	Msg_WM_MBUTTONUP_Text(_MSG_PARAMS)
{
	UINT2	k;
	k.low = wParam;
	k.high = lParam;
	inkInsertQueue(MouseBuffer, MouseItems, MouseRear, MouseMax, k)
	return(0);
}



// WM_MBUTTONUP Message Handler (Gaming)
PROC	Msg_WM_MBUTTONUP_Gaming(_MSG_PARAMS)
{
	UINT k, l;
	l = Control[_In_Key_MouseMiddle];
	k = 0xC0000000 | _In_Key_MouseMiddle;
	inkInsertQueue(GameBuffer, GameItems, GameRear, GameMax, k)
	GameStatus[l >> 5] &= ~(1 << (l & 31));
	return(0);
}



// WM_LBUTTONDBLCLK Message Handler (Text)
PROC	Msg_WM_LBUTTONDBLCLK_Text(_MSG_PARAMS)
{
	UINT2	k;
	k.low = wParam;
	k.high = lParam;
	inkInsertQueue(MouseBuffer, MouseItems, MouseRear, MouseMax, k)
	return(0);	
}



// WM_LBUTTONDBLCLK Message Handler (Gaming)
PROC	Msg_WM_LBUTTONDBLCLK_Gaming(_MSG_PARAMS)
{
	inkInsertQueue(GameBuffer, GameItems, GameRear, GameMax, _In_Key_MouseLeftDblClk)
	return(0);
}



// WM_RBUTTONDBLCLK Message Handler (Text)
PROC	Msg_WM_RBUTTONDBLCLK_Text(_MSG_PARAMS)
{
	UINT2	k;
	k.low = wParam;
	k.high = lParam;
	inkInsertQueue(MouseBuffer, MouseItems, MouseRear, MouseMax, k)
	return(0);	
}



// WM_RBUTTONDBLCLK Message Handler (Gaming)
PROC	Msg_WM_RBUTTONDBLCLK_Gaming(_MSG_PARAMS)
{
	inkInsertQueue(GameBuffer, GameItems, GameRear, GameMax, _In_Key_MouseRightDblClk)
	return(0);
}



// WM_MBUTTONDBLCLK Message Handler (Text)
PROC	Msg_WM_MBUTTONDBLCLK_Text(_MSG_PARAMS)
{
	UINT2	k;
	k.low = wParam;
	k.high = lParam;
	inkInsertQueue(MouseBuffer, MouseItems, MouseRear, MouseMax, k)
	return(0);	
}



// WM_MBUTTONDBLCLK Message Handler (Gaming)
PROC	Msg_WM_MBUTTONDBLCLK_Gaming(_MSG_PARAMS)
{
	inkInsertQueue(GameBuffer, GameItems, GameRear, GameMax, _In_Key_MouseMiddleDblClk)
	return(0);
}



// WM_MOUSEWHEEL Message Handler (Text)
PROC	Msg_WM_MOUSEWHEEL_Text(_MSG_PARAMS)
{
	UINT2	k;
	k.low = wParam;
	k.high = lParam;
	inkInsertQueue(MouseBuffer, MouseItems, MouseRear, MouseMax, k)
	return(0);	
}



// WM_MOUSEWHEEL Message Handler (Gaming)
PROC	Msg_WM_MOUSEWHEEL_Gaming(_MSG_PARAMS)
{
	UINT k, l;
	l = (wParam>0)?_In_Key_MouseWheelPlus:_In_Key_MouseWheelMinus;
	k = ((wParam & 0xFFFF0000) >> 8) | l;
	inkInsertQueue(GameBuffer, GameItems, GameRear, GameMax, k)
	return(0);
}



// WM_MOUSEMOVE Message Handler (Text)
PROC	Msg_WM_MOUSEMOVE_Text(_MSG_PARAMS)
{
	UINT2	k;
	k.low = wParam;
	k.high = lParam;
	inkInsertQueue(MouseBuffer, MouseItems, MouseRear, MouseMax, k)
	return(0);	
}



// WM_MOUSEMOVE Message Handler (Gaming)
PROC	Msg_WM_MOUSEMOVE_Gaming(_MSG_PARAMS)
{
	UINT k1, k2, k3, k4;
	int delX, delY;
	delX = (lParam & 0xFFFF) - _inkMouseHoldPositionX;
	delY = (lParam >> 16) - _inkMouseHoldPositionY;
	k1 = ((delX == 0) - 1) & _In_Key_MouseXmove;
	k2 = ((delY == 0) - 1) & _In_Key_MouseYmove;
	k3 = ((delX & 0xFFFF) << 8) | k1;
	k4 = ((delY & 0xFFFF) << 8) | k2;
	inkInsertQueue(GameBuffer, GameItems, GameRear, GameMax, k3)
	inkInsertQueue(GameBuffer, GameItems, GameRear, GameMax, k4)
	mouse_event(MOUSEEVENTF_ABSOLUTE | MOUSEEVENTF_MOVE, _inkMouseHoldPositionX, _inkMouseHoldPositionY, 0, 0);
	return(0);
}







#endif


